package com.custom.ui {	import caurina.transitions.Tweener;		import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.utils.Timer;		public class PngSequenceAnimator extends MovieClip {				/* ============================================ */		/* ======= Global Variable Declarations ======= */		/* ============================================ */		var dragTimer:Timer;		var degrade:Number;		var idleSpeed:Number;		var kitt:Loader = new Loader;		var isSwf:Boolean;		var dummyShape:Sprite;				var dragging:Boolean = false;		var prevX:Number = 0;		var velocity:Number = 0;		var newFrame:Number;		var zero:Number = 0;		var frags:Number = 0;				/* ============================================ */		/* ======= Element Interaction Functions ====== */		/* ============================================ */				/* checkDrag: The dragTimer TIMER event calls this function to iterate the bottle animation */		private function checkDrag(e:TimerEvent):void {			if(dragging) {				newFrame = quadrant() - zero;				velocity = quadrant() - prevX;			} else {				if(velocity > (idleSpeed - 0.15) && velocity < (idleSpeed + 0.15)) {					velocity = idleSpeed;					frags = 0;				} else {					if(velocity > idleSpeed) {						velocity -= Math.abs(velocity - idleSpeed)*degrade;					} else if(velocity < idleSpeed) {						velocity += Math.abs(velocity - idleSpeed)*degrade;					}				}				//				if(velocity < 1 && velocity > -1) {					frags += (velocity == 1) ? 0 : velocity;				} else {					frags += (velocity < 0) ? velocity%Math.ceil(velocity) : velocity%Math.floor(velocity);				}				//				if(frags >= 1) {					newFrame = MovieClip(kitt.content).currentFrame + Math.floor(velocity) + Math.floor(frags);					frags = 0;				} else if(frags <= -1) {					newFrame = MovieClip(kitt.content).currentFrame + Math.ceil(velocity) + Math.ceil(frags);					frags = 0;				} else {					newFrame = MovieClip(kitt.content).currentFrame + velocity;				}			}			prevX = quadrant();			newFrame = (newFrame > MovieClip(kitt.content).currentFrame) ? Math.floor(newFrame) : Math.ceil(newFrame);			//trace(velocity);			//trace(frags);			//trace(newFrame - MovieClip(kitt.content).currentFrame);			updateClip();		}				/* dragToggle: The MOUSE_DOWN, MOUSE_UP, and MOUSE_OUT events call this function to get mouse input for use in animating the bottle */		private function dragToggle(e:MouseEvent):void {			if(e.type == "mouseDown") {				dragging = true;				velocity = 0;				zero = quadrant() - MovieClip(kitt.content).currentFrame;			} else {				dragging = false;			}			dispatchEvent(new Event(Event.CHANGE));		}				/* updateClip: The checkDrag function uses this function to update the bottle display object */		private function updateClip():void {			if(newFrame > MovieClip(kitt.content).totalFrames) {				newFrame -= MovieClip(kitt.content).totalFrames;			} else if(newFrame <= 0) {				newFrame += MovieClip(kitt.content).totalFrames;			}			MovieClip(kitt.content).gotoAndStop(newFrame);		}		private function quadrant():Number {			return Math.round(kitt.mouseX/(kitt.width/(MovieClip(kitt.content).totalFrames/2)));		}				/* ============================================ */		/* ======== External Control Functions ======== */		/* ============================================ */				/* Class constructor function */		public function PngSequenceAnimator(assetUrl:String, rate:Number = 30, friction:Number = 0.075, speed:Number = -1):void {			//super(assetUrl);			dummyShape = new Sprite();			dummyShape.graphics.beginFill(0x000000);			dummyShape.graphics.drawRect(0,0,300,870);			dummyShape.graphics.endFill();			dummyShape.alpha = 0;			addChild(dummyShape);			//			setFrameRate(rate);			setDegrade(friction);			setIdle(speed);			//			isSwf = (assetUrl.search('.swf') != -1) ? true : false;			kitt.contentLoaderInfo.addEventListener(Event.INIT, assetInit);			kitt.contentLoaderInfo.addEventListener(Event.COMPLETE, assetComplete);			kitt.load(new URLRequest(assetUrl));		}				/* assetInit: The Loader INIT event calls this function to place the external SWF on the stage as soon as frame 1 is loaded */		private function assetInit(e:Event):void {			this.addChild(kitt);			//						if(isSwf) { MovieClip(kitt.content).stop(); }			//			dispatchEvent(e);			kitt.contentLoaderInfo.removeEventListener(Event.INIT, assetInit);		}		private function assetComplete(e:Event):void {			dispatchEvent(e);		}				/* startSpin: The Loader COMPLETE event calls this function to start user interactivity and bottle animation. Can also be called publicly */		public function startSpin(e:Event = null):void {						if(isSwf) {				kitt.addEventListener(MouseEvent.MOUSE_DOWN, dragToggle);				kitt.addEventListener(MouseEvent.MOUSE_UP, dragToggle);				kitt.addEventListener(MouseEvent.MOUSE_OUT, dragToggle);				dragTimer.addEventListener(TimerEvent.TIMER, checkDrag);				dragTimer.start();			}			kitt.contentLoaderInfo.removeEventListener(Event.COMPLETE, startSpin);		}				/* killSpin: This function is used by the parent to kill all animation and interactivity */		public function killSpin():void {			if(isSwf) {				kitt.removeEventListener(MouseEvent.MOUSE_DOWN, dragToggle);				kitt.removeEventListener(MouseEvent.MOUSE_UP, dragToggle);				kitt.removeEventListener(MouseEvent.MOUSE_OUT, dragToggle);				dragTimer.removeEventListener(TimerEvent.TIMER, checkDrag);				dragTimer.stop();				var step:uint = (MovieClip(kitt.content).currentFrame - 1) / 6;				for (var i:int=1; i < 7; i++) {					Tweener.addTween(MovieClip(kitt.content), {_frame:MovieClip(kitt.content).currentFrame - (i * step), delay:.2 * i});				}				Tweener.addTween(MovieClip(kitt.content), {_frame:1, delay:.2 * 6});			}		}		public function setFrameRate(rate:Number):void {			dragTimer = new Timer(rate, 0);		}		public function setDegrade(friction:Number):void {			degrade = friction;		}		public function setIdle(speed:Number):void {			idleSpeed = speed;		}	}}