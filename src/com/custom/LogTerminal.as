package com.custom{	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventPhase;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.text.TextField;	import flash.text.TextFormat;	/**	 * 	 * @author jbradforddillon	 * 	 */	public dynamic class LogTerminal extends Sprite	{		public var xpos:int = 0;		public var ypos:int = 0;		public var w:uint = 0;		public var h:uint = 0;		public var font:String = "Courier New";		public var fontSize:Number = 16;		public var lineColor:uint = 0x666666;		public var textColor:uint = 0xFFFFFF;		public var logAlpha:Number = 0.99;		public var wordwrap:Boolean = true;		public var ts:Boolean = true;				private var on_stage:Boolean = false;		private var g:Sprite;		private var t_log:TextField;		private var t_format:TextFormat = undefined;		private var resizeBtn:Sprite;		private var offsetX:Number;		private var offsetY:Number;		private var fullscreen:Boolean = false;				/**		 *	 logger for debugging. made visible by pressing SHIFT + D 		 * 		 */				public function LogTerminal():void		{			addEventListener(Event.ADDED_TO_STAGE, added_to_stage);						addEventListener(Event.REMOVED_FROM_STAGE, removed_from_stage);					//General graphics			g = new Sprite();					//drag & scroll events			g.addEventListener(MouseEvent.MOUSE_DOWN, reposition_start);			g.addEventListener(MouseEvent.MOUSE_UP, reposition_end);			g.addEventListener(MouseEvent.MOUSE_WHEEL, scrollLog);					//Resize Btn			resizeBtn = new Sprite();			var btn_graphics:Shape = new Shape();			with(btn_graphics.graphics)			{				lineStyle(0, 0, 0);				beginFill(0xCCCCCC);				drawCircle(-6, -6, 5);				endFill();			}						resizeBtn.addEventListener(MouseEvent.MOUSE_DOWN, resize_start);			resizeBtn.addEventListener(MouseEvent.MOUSE_UP, resize_end);			resizeBtn.addChild(btn_graphics);					//Textfield			t_log = new TextField();					t_log.mouseEnabled = false;			t_log.selectable = false;			t_log.multiline = true;			t_log.x = 8;			t_log.y = 8;					visible = false;			log('Starting Logger');		}		//Events		/**		 * when looger is added to the stage creates a format for the text of the logger		 * and adds an event listener for key presses		 * 		 * @param e <code>ADDED_TO_STAGE</code> event		 * 		 * @see log_redraw		 */				private function added_to_stage(e:Event):void		{			on_stage = true;					toggle_fullscreen(false);			stage.addEventListener(KeyboardEvent.KEY_DOWN, show_hide);					t_log.wordWrap = wordwrap;						if (!t_format)//If no user-defined format applied, apply default formatting			{				t_format = new TextFormat();				t_format.font = font;				t_format.color = textColor;				t_format.size = fontSize;				t_format.kerning = true;			}						t_log.setTextFormat(t_format);			t_log.defaultTextFormat = t_format;					log_redraw();			log('Logger Initialized', true);		}				/**		 * when looger is removed from the stage and changes the on_state value to false		 * 		 * @param e <code>REMOVED_FROM_STAGE</code> event		 * 		 */			public function removed_from_stage(e:Event):void		{			on_stage = false;		}				/**		 * called when mouse clicked to move the logger window		 * 		 * @param e <code>MOUSE_DOWN</code> event 		 * 		 */				private function reposition_start(e:Event):void		{			if(e.eventPhase == EventPhase.AT_TARGET)			{ 				offsetX = parent.mouseX-x;				offsetY = parent.mouseY-y;				addEventListener(Event.ENTER_FRAME, reposition);				alpha /= 2;			}		}				/**		 * called when mouse released to move the logger window		 * 		 * @param e <code>MOUSE_up</code> event 		 * 		 */			private function reposition_end(e:Event):void		{			if(e.eventPhase == EventPhase.AT_TARGET)			{				removeEventListener(Event.ENTER_FRAME, reposition);				alpha *= 2;			}		}		/**		 * function that actually moves the x and y of the logger window		 * 		 * @param e <code>ENTER_FRAME</code> event		 * 		 */				private function reposition(e:Event):void		{			x = parent.mouseX-offsetX;			y = parent.mouseY-offsetY;		}		/**		 * controls the scrolling of the logger window		 * 		 * @param e MouseEvent		 * 		 */				private function scrollLog(e:MouseEvent):void		{			t_log.scrollV += (e.delta>0?-1:1);		}			/**		 * called when mouse clicked to resize the logger window		 * 		 * @param e <code>MOUSE_DOWN</code> event 		 * 		 */			private function resize_start(e:MouseEvent):void		{			if(e.eventPhase == EventPhase.AT_TARGET)			{				offsetX = w-mouseX;				offsetY = h-mouseY;				addEventListener(Event.ENTER_FRAME, resize);			}		}			/**		 * called when mouse stops the resize of the logger window		 * 		 * @param e <code>MOUSE_UP</code> event 		 * 		 */			private function resize_end(e:MouseEvent):void		{			if(e.eventPhase == EventPhase.AT_TARGET)			{				removeEventListener(Event.ENTER_FRAME, resize);			}		}			/**		 * controls the resizing of the logger window		 * 		 * @param e ENTER_FRAME event		 * 		 */				private function resize(e:Event):void		{				w = Math.max(mouseX+offsetX, 40);				h = Math.max(mouseY+offsetY, 40);				log_redraw();		}			/**		 * Controls the visibility of the logger window and full screen 		 * 		 * @param e KeyboardEvent		 * 		 */				private function show_hide(e:KeyboardEvent):void 		{			if(e.shiftKey && (e.keyCode == 68))			{				this.visible = this.visible?false:true;			}else if(e.shiftKey && (e.keyCode == 70))			{				fullscreen = !fullscreen;				toggle_fullscreen(fullscreen);				log_redraw();			}else if(e.shiftKey && (e.keyCode == 79))			{				//sendLog();			}		}		/**		 * changes between full screen of the logger window to the size of the stage		 * 		 * @param fs FullScreen state Boolean		 * 		 */				private function toggle_fullscreen(fs:Boolean):void		{			if(fs)			{				w = stage.stageWidth;				h = stage.stageHeight;				x = 0;				y = 0;			}else{				w = stage.stageWidth * 0.75;				h = stage.stageHeight * 0.25;							xpos = xpos?xpos:stage.stageWidth/2 - w/2;				x = xpos;				ypos = ypos?ypos:stage.stageHeight/2 - h/2;				y = ypos;			}		}		private function sendLog():void		{			var myData:URLRequest = new URLRequest("http://theideaserver.com/uVendLogs/saveLog.php");			myData.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();			variables.Content = t_log.text;			myData.data = variables;			var loader:URLLoader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			loader.addEventListener(Event.COMPLETE, logSent);			loader.load(myData);		}				private function logSent(e:Event):void		{			log(String(e));		}			//Methods		public function log_redraw():void		{			if (!on_stage)			{				return;			}						with(g.graphics)			{				//Draw window				clear();				lineStyle(1,lineColor,100,true);				beginFill(0x000000, 100);				drawRoundRect(0,0,w,h,12,12);				endFill();				drawRect(8,8,w - 16,h - 16);			}					t_log.width = w - 16;			t_log.height = h - 16;			resizeBtn.x = w;			resizeBtn.y = h;					addChild(g);			addChild(t_log);			addChild(resizeBtn);			alpha=logAlpha;		}		public function log(str:String, endLine:Boolean = false, outTs:Boolean = true):void		{			var doscroll:Boolean = false;			if(t_log.scrollV == t_log.maxScrollV) doscroll = true;			var outText:String = '';						if(outTs)			{				var now:Date = new Date();				outText = outText.concat((now.getMonth()+1) + '/' + now.getDate() + ' ' + now.toLocaleTimeString() + ': ');			}					outText = outText.concat(str + '\n');					if(endLine)			{				outText = outText.concat('--------------------\n\n');			}					t_log.appendText(outText);			trace(outText);					//make sure the textfield is scrolled all the way down			if(doscroll) t_log.scrollV = t_log.maxScrollV;		}	}}	